The ```1-my_list``` module

======================================

Using ```my_list```
______________________________________


This is an example txt file in restructured text format
First import ```my_list``` from the ```1-my_list``` module:


>>> MyList = __import__('1-my_list').MyList


Check for import the class from module:
>>> MyList = __import__('1-my_list').MyList


Check for module docstring:
>>> a = __import__("1-my_list").__doc__


Check for class docstring:
>>> b = __import__("1-my_list").MyList.__doc__
>>> len(b) > 1
True


Check for method docstring:
>>> c = __import__("1-my_list").MyList.print_sorted.__doc__
>>> len(c) > 1
True

Check the given value 
>>> my_list = MyList()

>>> my_list.append(1)

>>> my_list.append(4)

>>> my_list.append(2)

>>> my_list.append(3)

>>> my_list.append(5)

>>> print(my_list)
[1, 4, 2, 3, 5]

my_list.print_sorted()
[1, 2, 3, 4, 5]

>>> print(my_list)
[1, 4, 2, 3, 5]


Check with object empty
>>> ob_test_1 = MyList()
>>> print(ob_test_1)
[]


Check with object with negative values
>>> obj_test_2 = MyList()
>>> obj_test_2.append(-1)
>>> obj_test_2.append(-2)
>>> obj_test_2.append(-3)
>>> obj_test_2.append(-4)
>>> obj_test_2.append(-9)
>>> obj_test_2.append(-8)
>>> obj_test_2.append(-7)
>>> print(obj_test_2)
[-1, -2, -3, -4, -9, -8, -7]
>>> obj_test_2.print_sorted()
[-9, -8, -7, -4, -3, -2, -1]
>>> print(obj_test_2)
[-1, -2, -3, -4, -9, -8, -7]


Check when a value of the objec have anther type data
>>> obj_test_3 = MyList()
>>> obj_test_3.append(1)
>>> obj_test_3.append(2)
>>> obj_test_3.append([1, 2])
>>> obj_test_3.append(3)
>>> obj_test_3.append(4)
>>> print(obj_test_3)
[1, 2, [1, 2], 3, 4]

When the object have NULL value
>>> obj_test_4 = MyList()
>>> obj_test_4.append(NULL)
Traceback (most recent call last):
...
NameError: name 'NULL' is not defined


When the object have NaN value
>>> obj_test_5 = MyList()
>>> obj_test_5.append(NaN)
Traceback (most recent call last):
...
NameError: name 'NaN' is not defined
>>> print(obj_test_5)
[]
>>> obj_test_5.print_sorted()
[]


When the object have None value
>>> obj_test_6 = MyList()
>>> obj_test_6.append(None)
>>> print(obj_test_6)
[None]
>>> obj_test_6.print_sorted()
[None]
